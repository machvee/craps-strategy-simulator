stats - three varieties: 
  1. Events made/win/loss/streaks (e.g. rolled a 2,3,4,5...etc)
  2. Bets made/win/loss/streaks, with summed quantities associated with made/win/loss (TableBet parent, PlayerBet child bets)
  3. Measure.  keep min,max,avg on measurement of an entity.  e.g. # of points made in a shooter turn

  Stats can be collected for groups of related stats.  This allows StatDefs to be shared easily, and also 
  allows iteration over many stats for tabluar print out and aggregating totals (e.g. total amount across all bets)
  
  Stat Instances can have a parent/child relationship.  The parent will have a list of zero or more active children, and
  when the parent stat is tallied, it will tally its active children.  The containing class of the stat child accumulator will be
  passed an Outcome from the parent stat def, and it calls the child stat accumulator update method with its specific child data.
  The child stat accumulator is updated, and the child will invoke its parent stat accumulator with the same data.
  
  e.g.  a parent table_bet stat for Place 6 bet, will have child stats that are tied to
  each active player_bet on that table_bet.  When the subclass of crapsbet determines outcome and updates
  the parent stat (and any additional specialized stats), it also asks the stat for an iterator to the registered child
  stats for that tallying process to update.  The stat parent and child class that holds the bet needs to implement a
  stat-updating method.


craps_bet - abstract bet you can make on a craps table
  name
  payout
  min
  max
  basic bet validation
  on/off rules

specific bet subclass of craps_bet
  outcome - logic for determining win or loss based on table state and last roll.  returns true Outcome
  additional_stats - can register and maintain additional stats, and is responsible for their tallys
  
bet_box - ties the specific bet subclass to a physical table
  player_bets - current player_bets (on/off) on the table felt
  settle - iterates through player_bets outcome method to pay players winnings, takes house winnings, move or return bets
  stat - based on subclass name bets made/win/loss/streaks, amount bet/won/lost.  Iterates through player_bet and craps_bet subclass 

player - when he joins the table, he gets a clone of all table_bet stats and shooter roll_stats.  When these stats are tallied at
  the table level, they are also tallied for the player when relevent -- when he's the shooter and when he has a player_bet on a
  active on a table_bet
  

-------

Craps Bots

  1. Background

  A bot has an objective.  A mission.  In the case of Vegas games the mission is to maximize gains and minimize losses.
  When the conditions are right, the bot should act to take full advantage.   When times are going rough, the bot should
  hunker down and protect.

  The bot is programmed to carry out the objective.  These are the bot's mission instructions.   But the bot is only as good as 
  its programming.

  2. Programming the Bot

  The bot has two programming languages.  One language is for people who want the bot to carry out the mission and achieve
  the objective. This language is in terms of how people understand and appraoch the game.   The other is the machine language
  of the bot... the language of the instructions the bot actually understands and can process effeciently.  An
  interpreter program will translate the program that people write into the instructions that be bot will actually process. 
  
  As there are many ways to play Vegas games, each person will have their own style, risk tolerance and aggressive or
  conservative appraoch.  The goal of whaleamker is to capture these bot programs and give feedback on how the bot 
  strategy works.  The bot programs are stored with their results and can be compared with other bot strategies for 
  effectiveness.

  3. Bot program
     a.  define the conditions that the program will execute
          e.g. table.hot? table.cold?
     b.  define the bet to make and amount/odds
          e.g. pass_line $25
     c.  define the conditions when to make the bet with that amount.  dice, tracking_bet, player_bet stats and table state
         are available
          e.g. after 3 rolls of 5 after the point established, make a place bet on 5
     d.  define a pressing sequence
          e.g. press after win to 20,50,100,200,200,200,400
     e.  define the conditions that trigger the next press in the sequence
          e.g. press after second win to 20,40,80,160

--------
Runs:
Player walks to the table with and ID, money, a betting level, a playing strategy, and criteria when they will walk away.

e.g.
ID:          "Dave"
Money:       $1000
Unit:        $10 min bet table
Strategy: Basic strategy plus something to try new
Exit Criteria:  Leave the table when 75% down, or 300% up, or broke (allow negative?)

When a player leaves the table, they want to have a sense as to how the Strategy worked out

Table Stats: (how did the table do in general)
Roll Stats:  Did I just get unlucky and a lot of 7's happened to have been rolled
Bet Maker Stats:  how did each bet maker perform?   Did my presses get utilized?  Was it a overall loser or winner?
Bet Stats:  How did all my bets do in a single view?
Money Stats:   How did my money level rise/fall during the run?  High/low point?
Hot Rolls:  Show me where and for how long my hot rolls were.   Points made, press levels, amount won
Cold Table:  Show me where I couldn't buy a win.  How long did it last.


Saved Run:
Save all of the above inputs and outputs, including the Dice Seed, and give it a unique name.  The Run should be able to be re-run from the stored inputs and get the identical results.  

Load/Modify Run:  A saved run should be able to be reloaded and inputs tweaked.  Example:
  1. more start money, higher lower bet unit
  2. New or tweaked strategy
  3. New exit criteria.
  4. New Dice Seed.

Compare Runs.   Runs should be comparable.   Compare the inputs and show differences, then compare the outputs and show the difference in results.


Run Stats to keep
-----------------

Roll Stats
# Shoot dice Roll Stats (keep existing)

Bet Stats
(Tracked for each Bet, each Player)
  # total made
  # won (max consec when at least one bet made)
  # lost (max consec when at least one bet made)
  # total $ bet
  # total $ won
  # total $ lost

Pass Line Bet
  # total coming out rolls
  # flw (7,11)      WIN   (max consec)
  # craps (2,3,12)  LOSE  (max consec)

  # points established (4-10)  (max consec)
  #   points made (4-10) WIN   (max consec)
  #   seven out          LOSE  (max consec)

ComeOdds Bet
  # returned to player

Player
  Bet Stats
  rail hi/lo
  total $ bet
  total $ won
  total $ lost

Table
  Bet stats
  total bets made
  total bets won
  total bets lost
  consec rolls without a seven_out (max)


table stats collection
----------------------
named group of definitions
accumulate definitions
support instantiate a new TSC


Inputs player strategy can reference (and how they can help shape a strategy)

1. whats the table state?  off on (point)
     "if table is off I want to make a pass line bet, but not a come bet"
2. what player bets are on the table
     "I don't have a place 6/8 bet"  "I already have a pass odds bet"
3. how much is bet on each
     "how much do I have on place 5, I want to stop pressing it so high"
4. outcome of last roll
     "won hard 8, place 8, lost Field bet"
5. consecutive win/lost streak of each table bet +2 = 2 wins, -3 = 3 losses
     "wow, the place 5 bet just hit 3 times, and I'm not on it"
6. consecutive win/lost streak of each player bet +2 = 2 wins, -3 = 3 losses
     "my hard 8 just lost 3 in a row, I think I'll stay off of it"
     "I just won my 4th point in a row.  Table is HOT!  Start Pressing!"
7. current rail win/losses (% up/down)
     "I'm down 50%.  I think I'll quit"
8. number of rolls
     "I will do 500 rolls and stop to see where I'm at"


Testing out Strategies

1. Define your strategy by programming a bot.  give the strategy and run a unique name.
2. clear the stats
3. define stop criteria 
  a. shooter_turns n
  b. play points n
  c. num rolls of dice
  d. player acct up/down % (or goes bust)
4. stops at n, when other bot criteria makes the round stop
5. seed and player/table stats can be saved, so this exact dice sequence can be replayed
   with slightly different strategy
6. Summary of run. For each bet_maker:
  a. PassLine
      money won 7/11 winner, lost craps
      bets made
      points established
      points won/lost
      max consecutive won/lost
      money won/lost (line, odds)
  b. Place Bets, by number
      bets made
      number won
      number lost
      money won/lost
      max consecutive won
      max won single point
      max bet amount single point
      pressing stats
        total presses
        max presses single point
        avg presses per point
  c. Hardways, by number
      bets made
      number won
      number lost
      number lost soft
      max consecutive won
      max won single point
      max bet amount single point
      pressing stats
        total presses
        max presses single point
        avg presses per point
  d. Come Bets
      bets made
      money won 7/11 winner, lost craps
      number won/lost when on number
      money won/lost (come, odds) when on number
  e. Other single roll/prop bets
      bets made
      bets won/lost
      money won/lost

7. What to Save
    Run name (_ count if not unique)
     Table name
     Player name
     Date Time
     Stop Criteria
     Dice Seed
     All Stats from #6
     Player stats


Bet Makers and PassLine and Come Out bets

  1.  Bet makers are responsible only for making the Passline bet and a come Out bet at the appropriate times.
      The table play will Morph these bets into numbered bets.  The pass_line bet won't get remade because the 
      table is on.  The come out bets *will be remade because the table in on.

  2.  So BetMakers are good for PassLine and Come Out.  If number of bets on table is important for a bet_maker rule
      ComeBets will be counted, not Come Out.

  3.  BetMaker stats should account for the morph bets winnings/losing when tabulating

  4.  Odds bets need to be made if odds multiples are specified in PassLine and ComeOut Bets.  Its not easy to know who
      is responsible for making these bets.  The BetMakers are no longer in scope when the point gets set or a come out
      bet is morphed to a numbered bet.  Odds bet win/loss stats should be tied to the bet_maker that made the original
      passline or comeout bet.

Place Bet Makers and Management

  1. When place bets already exist after a pass/come number bet is made typically the place bet is moved to
     another open number (unless on_the_point is allowed by the maker).  That number tends to be chosen in the
     order of 6/8,5/9,4/10, or the bet can be brought down.

  2. If a place bet is normally made on a number, but the point exists there, the place bet will not made on that number 
     if off_the_point isn't declared.  If not off_the_point, the place bet can be made by the maker on another open
     Place number in 6/8,5/9,4/10, or the bet can not be made at all.

  3. Support maker semantics to relocate the bet, keep or put it on the point number (we have off_the_point to mean the opposite)
     and if the bet will be relocated, an order in which to locate a new place bet number (default: 6,8,5,9,4,10)


Bets that are Left up/Taken Down/Working/Off
--------------------------------------------
1. With the exception of Come/Passline Bets, all bets can be removed after made.
2  Come/Passline Bets can be pressed but cannot be reduced or taken down once made
3. Some bets are left up by nature after a win:
     a. one roll bets.  winners are paid, but original bet is left up.  Sometimes pressed
     b. place/buy and hard-ways bets.  Winner is paid, but original bet is left up.  Sometimes pressed.
4. When bets are left up by nature, they will be:
     a. hard-ways, and place/buy bets are implicitly 'off' during the come out rolls
     b. implicitly 'on' during the point making rolls
5. Any bet that can be removed, can be marked explicitly 'off' by the shooter.
        e.g. Mark place bets off after dice leave the table
6. Any bet that is implicitly off during the come-out roll, can be marked explicitly 'on' by the shooter.


Table/Dice events to monitor for BetMaker/Presser
                nPM
 +----------------------------------+
 |           +-----------+---+      |
 v           v     nBW   |   |      |
COR      PE(n)  BM(n)   BW   BL    PM
 |.......|.......|.......|...|......|....SO
 1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2
           |       0 1 2 3 4 5 6 7 8 9 0 1
           |         nR
           1 2 3 4 5 6 7 8 9 1 1 1 1
                             0 1 2 3
                   nRPE

COR   = Come out Roll passline bet/one-roll bets
BW    = Bet Won (e.g. hardways, place, come)
PM    = Point Made
BM    = Bet Made (e.g. hardways, place, come)
BL    = Bet Lost
SO    = Seven Out.  End of life for BetMakers and counts

PE(n) = nth Point Established
nPM   = nth Point Made
nR    = nth of rolls
nRPE  = nth Rolls after a Point Established
BM(n) = max of given type of Bets Made (e.g. make only n come/place bets)
nBW   = number of given bet wins w/o loss

